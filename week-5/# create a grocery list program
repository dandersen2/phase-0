# Create a new list that can hold items and quantities
#http://ruby-doc.org/core-1.9.3/Hash.html

# Release 1

# CREATE METHOD create_list: Create an empty list
# Input: Not applicable yet
# Output: Returns an empty hash

# CREATE METHOD add_item: Add an item to the list
# Input: An item and a quantity of that item
# Output: Returns hash with a key and its value

# CREATE METHOD remove_item: Remove an item from the list
# Input: The item that is selected to be removed from the hash
# Output: Returns the list without the item that we wanted removed

# CREATE METHOD update_quantity: Take one item and change its quantity value
# Input: Which item is to be changed and the new value
# Output: List with new value for the selected item

# CREATE METHOD print_list: Returns entire list to be viewed or printed
# Input: The entire final version of the list
# Output: List in console or physical version of the list

# Release 2
I LOST SOMEWHERE IN MY COMPUTER WHAT WE DID LAST TIME :(

$list = Hash.new

def return_list(list)
   # All classes are capitalized by convention in Ruby.
  return list
end

def add_item(item, quantity)
  list = {item.to_s => quantity}
  return list
end

def remove_item(item)
  list.delete(item)
  return list
end

def update_quantity(item, quantity)
  #if #item exists
    list = {:item => quantity}
  return list
  #else#give a warning
    puts "you need to add the item first"
  #end
end

def print_list(list)
  list.each{|item, quantity| puts "Buy #{quantity} #{item} " }
end

# Release 3
  list = list method
p return_list #== {} # Try turning into tests if it is helpful. Else you can just p the value to see that it is what you intended it to be.
p add_item("lemonade",2)
#p add_item("tomatoe",3)
# p add_item("lemonade",2)
# p add_item("lemonade",2)
# remove
____________________________________________________________


$grocery_list = {}

def new_list
  $grocery_list = {}
end

def add_item
  item = gets.chomp
  puts "How many?"
  quantity = gets.chomp
  $grocery_list[item] = quantity
end

def delete_item (item)
  $grocery_list.delete(item)
end

def update_item
  add_item
end

def print_list
  puts "--------------------------"
  puts "Here's your current list:"
  $grocery_list.each {|item, quantity| puts "#{item}: #{quantity}"}
  puts "--------------------------"
end


done=false
until done
  print_list
  puts "Do you want to:"
  puts "New list"
  puts "Add an item"
  puts "Delete an item"
  puts "Update quantity or"
  puts "Print the list and quit."
  puts "Input the first letter of your choice."
choice = gets.chomp.downcase[0]
case choice
  when "n"
  new_list
  when "a"
  puts "What item do you want to add?"
  add_item
  when "d"
  print_list
  puts "Which item do you want to delete?"
  item = gets.chomp
  delete_item(item)
  when "u"
  print_list
  puts "Which item do you want to update?"
  update_item
  when "p"
  print_list
  done=true
  end
end


# create a grocery list program



def create_list
  {}
end


def add_item(food, quantity)

  create_list[food] = quantity
  p create_list
end


# create_list[food] = quantity sets "quantity" as the value for the "food" key



p add_item("apple", 9)


__________________________________________

# create a grocery list program



def create_list
  {}
end


# def add_item(food, quantity)
#   item_list = create_list
#   item_list[food] = quantity
#   p item_list
# end

def add_item(list, food, quantity)  #OMG OMG OMG OMG!!!!!!!
  create_list[food] = quantity
end
# create_list[food] = quantity sets "quantity" as the value for the "food" key



 add_item("apple", 9)
 add_item("potato", 12)


______________________________________________

FINAL WORKING CODE!!!!!!!


# create a grocery list program



def create_list
  {}
end


# def add_item(food, quantity)
#   item_list = create_list
#   item_list[food] = quantity
#   p item_list
# end

def add_item(list, food, quantity)  #OMG OMG OMG OMG!!!!!!!
  list[food] = quantity
#   new_list.merge(list)
#   return new_list
end
# create_list[food] = quantity sets "quantity" as the value for the "food" key
list = create_list
add_item(list, "apple", 9)
add_item(list, "potato", 12)
p list

# def mode( array )
#   hash = Hash.new(0)
#   array.each{|key| hash[key] += 1}
#   hash.each do |key, val|
#       highest = key if val == hash.values.max
#       Array.new << highest
#       puts highest
#   end
# end
# p mode([1,2,2,4,4])


_______________________________________
CLEANED UP FINAL CODE FOR ADD ITEM METHOD

def create_list
  {}
end

def add_item(list, food, quantity)  #OMG OMG OMG OMG!!!!!!!
  create_list = list + list[food] = quantity
end

# create_list[food] = quantity sets "quantity" as the value for the "food" key

add_item(list, "apple", 9)
add_item(list, "potato", 12)